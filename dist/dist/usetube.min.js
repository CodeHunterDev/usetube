"use strict";
var __awaiter = this && this.__awaiter || function (e, t, o, i) { return new (o || (o = Promise))((function (n, l) { function d(e) { try {
    r(i.next(e));
}
catch (e) {
    l(e);
} } function a(e) { try {
    r(i.throw(e));
}
catch (e) {
    l(e);
} } function r(e) { var t; e.done ? n(e.value) : (t = e.value, t instanceof o ? t : new o((function (e) { e(t); }))).then(d, a); } r((i = i.apply(e, t || [])).next()); })); };
const axios_1 = require("axios"), moment = require("moment"), headers = { headers: { "Access-Control-Allow-Origin": "*", "x-youtube-client-name": 1, "x-youtube-client-version": "2.20200911.04.00", "User-Agent": "Mozilla/5.0 (Linux; Android 5.0; SM-G900P Build/LRX21T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Mobile Safari/537.36" } }, headersAJAX = { headers: { "Access-Control-Allow-Origin": "*", "User-Agent": "hellobiczes", "x-youtube-client-name": 1, "x-youtube-client-version": "2.20200731.02.01" } }, mobileRegex = /var\ ytInitialData\ \=\ \'(.*)\'\;<\/script>/, dateRegex = /publishDate":"(.*)","ownerChannelName/;
function decodeHex(e) { return e.replace(/\\x22/g, '"').replace(/\\x7b/g, "{").replace(/\\x7d/g, "}").replace(/\\x5b/g, "[").replace(/\\x5d/g, "]").replace(/\\x3b/g, ";").replace(/\\x3d/g, "=").replace(/\\x27/g, "'").replace(/\\\\/g, "doubleAntiSlash").replace(/\\/g, "").replace(/doubleAntiSlash/g, "\\"); }
function wait() { let e = Math.floor(300 * Math.random()), t = (new Date).getTime(), o = t; for (; o < t + e;)
    o = (new Date).getTime(); }
function formatYoutubeCount(e) { const t = null == e ? void 0 : e.includes("M"), o = null == e ? void 0 : e.includes("k"); let i = null == e ? void 0 : e.replace(/[^0-9,.]/g, "").replace(",", "."); return t ? i *= 1e6 : o && (i *= 1e3), parseInt(i) || 0; }
function getVideoDate(e) { var t; return __awaiter(this, void 0, void 0, (function* () { try {
    const o = (yield axios_1.default.get("https://m.youtube.com/watch?v=" + e, headers)).data;
    let i = (null === (t = dateRegex.exec(o)) || void 0 === t ? void 0 : t[1]) || "{}";
    return i += " " + Math.floor(24 * Math.random()) + "-" + Math.floor(60 * Math.random()) + "-" + Math.floor(60 * Math.random()), moment(i, "YYYY-MM-DD H-m-s").toDate();
}
catch (e) { } })); }
function getVideoDesc(e) { var t, o, i, n, l, d, a, r, s, u; return __awaiter(this, void 0, void 0, (function* () { try {
    const c = (yield axios_1.default.get("https://m.youtube.com/watch?v=" + encodeURI(e), headers)).data, v = (null === (t = mobileRegex.exec(c)) || void 0 === t ? void 0 : t[1]) || "{}", h = JSON.parse(decodeHex(v));
    return (null === (u = null === (s = null === (r = null === (a = null === (d = null === (l = null === (n = null === (i = null === (o = h.contents) || void 0 === o ? void 0 : o.singleColumnWatchNextResults) || void 0 === i ? void 0 : i.results) || void 0 === n ? void 0 : n.results) || void 0 === l ? void 0 : l.contents[1]) || void 0 === d ? void 0 : d.itemSectionRenderer) || void 0 === a ? void 0 : a.contents[0]) || void 0 === r ? void 0 : r.slimVideoMetadataRenderer) || void 0 === s ? void 0 : s.description) || void 0 === u ? void 0 : u.runs) || "";
}
catch (e) { } })); }
function getChannelDesc(e) { var t, o, i; return __awaiter(this, void 0, void 0, (function* () { try {
    const n = (yield axios_1.default.get("https://m.youtube.com/channel/" + encodeURI(e) + "/videos", headers)).data, l = (null === (t = mobileRegex.exec(n)) || void 0 === t ? void 0 : t[1]) || "{}", d = JSON.parse(decodeHex(l));
    return (null === (i = null === (o = d.metadata) || void 0 === o ? void 0 : o.channelMetadataRenderer) || void 0 === i ? void 0 : i.description) || "";
}
catch (e) { } })); }
function searchVideo(e, t) { var o, i, n, l, d, a, r, s, u, c, v; return __awaiter(this, void 0, void 0, (function* () { try {
    let h = [], m = [], g = "";
    if (t) {
        let e = (yield axios_1.default.get("https://youtube.com/browse_ajax?ctoken=" + t, headersAJAX)).data;
        h = (null === (a = null === (d = e[1].response.continuationContents) || void 0 === d ? void 0 : d.gridContinuation) || void 0 === a ? void 0 : a.items) || "", t = (null === (v = null === (c = null === (u = null === (s = null === (r = e[1].response.continuationContents) || void 0 === r ? void 0 : r.gridContinuation) || void 0 === s ? void 0 : s.continuations) || void 0 === u ? void 0 : u[0]) || void 0 === c ? void 0 : c.nextContinuationData) || void 0 === v ? void 0 : v.continuation) || "";
    }
    else {
        let d = (yield axios_1.default.get("https://m.youtube.com/results?sp=EgIQAQ%253D%253D&videoEmbeddable=true&search_query=" + encodeURI(e), headers)).data, a = (null === (o = mobileRegex.exec(d)) || void 0 === o ? void 0 : o[1]) || "{}", r = JSON.parse(decodeHex(a)).contents.sectionListRenderer;
        h = r.contents[0].itemSectionRenderer.contents, t = (null === (l = null === (n = null === (i = r.continuations) || void 0 === i ? void 0 : i[0]) || void 0 === n ? void 0 : n.reloadContinuationData) || void 0 === l ? void 0 : l.continuation) || "";
    }
    for (let e = 0; e < h.length; e++) {
        let t = yield formatVideo(h[e], !0);
        "didyoumean" === t.id ? g = t.title : m.push(t);
    }
    return { tracks: m, didyoumean: g, token: t };
}
catch (t) {
    console.log("search videos error, terms: " + e, t);
} })); }
function searchChannel(e, t) { var o, i, n, l, d, a, r, s, u, c, v, h, m, g, x, p, f, y; return __awaiter(this, void 0, void 0, (function* () { try {
    let b = [], R = [], C = "";
    if (t) {
        let e = (yield axios_1.default.get("https://youtube.com/browse_ajax?ctoken=" + t, headersAJAX)).data;
        b = (null === (u = null === (s = e[1].response.continuationContents) || void 0 === s ? void 0 : s.gridContinuation) || void 0 === u ? void 0 : u.items) || "", t = (null === (g = null === (m = null === (h = null === (v = null === (c = e[1].response.continuationContents) || void 0 === c ? void 0 : c.gridContinuation) || void 0 === v ? void 0 : v.continuations) || void 0 === h ? void 0 : h[0]) || void 0 === m ? void 0 : m.nextContinuationData) || void 0 === g ? void 0 : g.continuation) || "";
    }
    else {
        const s = (yield axios_1.default.get("https://m.youtube.com/results?sp=CAASAhAC&search_query=" + encodeURI(e), headers)).data, u = (null === (o = mobileRegex.exec(s)) || void 0 === o ? void 0 : o[1]) || "{}", c = JSON.parse(decodeHex(u));
        b = null === (l = null === (n = null === (i = c.contents.sectionListRenderer) || void 0 === i ? void 0 : i.contents[0]) || void 0 === n ? void 0 : n.itemSectionRenderer) || void 0 === l ? void 0 : l.contents, t = (null === (r = null === (a = null === (d = c.continuations) || void 0 === d ? void 0 : d[0]) || void 0 === a ? void 0 : a.reloadContinuationData) || void 0 === r ? void 0 : r.continuation) || "";
    }
    for (let e = 0; e < b.length; e++)
        if (b[e].compactChannelRenderer) {
            const t = b[e].compactChannelRenderer;
            let o = (null === (x = t.thumbnail) || void 0 === x ? void 0 : x.thumbnails[0].url) || "", i = (null === (p = t.thumbnail) || void 0 === p ? void 0 : p.thumbnails[1].url) || "";
            o = o.startsWith("//") ? "https:" + o : o, i = i.startsWith("//") ? "https:" + i : i;
            const n = formatYoutubeCount(null === (f = t.subscriberCountText) || void 0 === f ? void 0 : f.runs[0].text), l = formatYoutubeCount(null === (y = t.videoCountText) || void 0 === y ? void 0 : y.runs[0].text);
            R.push({ name: t.title.runs[0].text, channel_id: t.channelId, nb_videos: l, nb_subscriber: n, official: !!t.ownerBadges, channel_avatar_small: o, channel_avatar_medium: i });
        }
        else if (b[e].didYouMeanRenderer || b[e].showingResultsForRenderer) {
            let t;
            t = b[e].didYouMeanRenderer ? b[e].didYouMeanRenderer : b[e].showingResultsForRenderer, C = t.correctedQuery.runs[0].text;
        }
    return { channels: R, didyoumean: C, token: t };
}
catch (e) { } })); }
function getChannelVideos(e, t) { var o, i, n, l, d, a, r, s, u, c, v, h, m, g, x, p, f, y, b, R; return __awaiter(this, void 0, void 0, (function* () { try {
    const C = (yield axios_1.default.get("https://m.youtube.com/channel/" + e + "/videos", headers)).data, _ = (null === (o = mobileRegex.exec(C)) || void 0 === o ? void 0 : o[1]) || "{}", V = JSON.parse(decodeHex(_)), w = null === (s = null === (r = null === (a = null === (d = null === (l = null === (n = null === (i = V.contents) || void 0 === i ? void 0 : i.singleColumnBrowseResultsRenderer) || void 0 === n ? void 0 : n.tabs[1]) || void 0 === l ? void 0 : l.tabRenderer) || void 0 === d ? void 0 : d.content) || void 0 === a ? void 0 : a.sectionListRenderer) || void 0 === r ? void 0 : r.contents[0]) || void 0 === s ? void 0 : s.itemSectionRenderer;
    let A = (null === (v = null === (c = null === (u = w.continuations) || void 0 === u ? void 0 : u[0]) || void 0 === c ? void 0 : c.nextContinuationData) || void 0 === v ? void 0 : v.continuation) || "", D = [];
    for (let e = 0; e < w.contents.length; e++) {
        let o = yield formatVideo(w.contents[e]);
        if (moment(o.publishedAt).isBefore(t) && t)
            return D;
        D.push(o);
    }
    for (; "" !== A;)
        try {
            wait();
            let e = (yield axios_1.default.get("https://youtube.com/browse_ajax?ctoken=" + A, headersAJAX)).data, o = (null === (x = null === (g = null === (m = null === (h = e[1]) || void 0 === h ? void 0 : h.response) || void 0 === m ? void 0 : m.continuationContents) || void 0 === g ? void 0 : g.gridContinuation) || void 0 === x ? void 0 : x.items) || "";
            A = (null === (R = null === (b = null === (y = null === (f = null === (p = e[1].response.continuationContents) || void 0 === p ? void 0 : p.gridContinuation) || void 0 === f ? void 0 : f.continuations) || void 0 === y ? void 0 : y[0]) || void 0 === b ? void 0 : b.nextContinuationData) || void 0 === R ? void 0 : R.continuation) || "";
            for (let e = 0; e < o.length; e++) {
                let i = yield formatVideo(o[e]);
                if (moment(i.publishedAt).isBefore(t) && t)
                    return D;
                D.push(i);
            }
        }
        catch (e) {
            console.log("getChannelVideos failed"), console.log(e), A = "";
        }
    return D;
}
catch (t) {
    console.log("cannot get channel videos for id: " + e + ", try again");
} })); }
function getPlaylistVideos(e, t) { var o, i, n, l, d, a, r, s, u, c, v, h, m; return __awaiter(this, void 0, void 0, (function* () { try {
    const g = (yield axios_1.default.get("https://m.youtube.com/playlist?list=" + e, headers)).data, x = (null === (o = mobileRegex.exec(g)) || void 0 === o ? void 0 : o[1]) || "{}", p = JSON.parse(decodeHex(x)), f = (null === (c = null === (u = null === (s = null === (r = null === (a = null === (d = null === (l = null === (n = null === (i = p.contents) || void 0 === i ? void 0 : i.singleColumnBrowseResultsRenderer) || void 0 === n ? void 0 : n.tabs[0]) || void 0 === l ? void 0 : l.tabRenderer) || void 0 === d ? void 0 : d.content) || void 0 === a ? void 0 : a.sectionListRenderer) || void 0 === r ? void 0 : r.contents[0]) || void 0 === s ? void 0 : s.itemSectionRenderer) || void 0 === u ? void 0 : u.contents[0]) || void 0 === c ? void 0 : c.playlistVideoListRenderer) || "";
    let y = (null === (v = f.continuations[0]) || void 0 === v ? void 0 : v.nextContinuationData.continuation) || "", b = [];
    for (let e = 0; e < f.contents.length; e++)
        b.push(yield formatVideo(f.contents[e]), t);
    for (; "" !== y;)
        try {
            wait();
            const e = (yield axios_1.default.get("https://m.youtube.com/playlist?ctoken=" + y, headers)).data;
            let o = (null === (h = mobileRegex.exec(e)) || void 0 === h ? void 0 : h[1]) || "{}", i = JSON.parse(decodeHex(o)).continuationContents.playlistVideoListContinuation, n = i.contents;
            y = i.continuations ? null === (m = i.continuations[0]) || void 0 === m ? void 0 : m.nextContinuationData.continuation : "";
            for (let e = 0; e < n.length; e++)
                b.push(yield formatVideo(n[e]), t);
        }
        catch (e) {
            console.log("getPlaylistVideos failed"), console.log(e), y = "";
        }
    return b;
}
catch (t) {
    console.log("cannot get playlist " + e + ", try again"), console.log(t);
} })); }
function formatVideo(e, t) { var o, i, n, l, d; return __awaiter(this, void 0, void 0, (function* () { try {
    if (e.compactVideoRenderer || e.gridVideoRenderer || e.playlistVideoRenderer) {
        e.compactVideoRenderer ? e = e.compactVideoRenderer : e.gridVideoRenderer ? e = e.gridVideoRenderer : e.playlistVideoRenderer && (e = e.playlistVideoRenderer);
        let a = e.videoId, r = 0;
        if (e.title.simpleText ? e.title = e.title.simpleText : e.title.runs[0].text ? e.title = e.title.runs[0].text : e.title = "", e.original_title = e.title, 1 === e.title.split("-").length)
            e.artist = "";
        else {
            let t = e.original_title.match(/([^,]*)-(.*)/);
            e.artist = t[1], e.title = t[2];
        }
        r = e.lengthText ? e.lengthText.runs[0].text.split(":") : (null === (i = null === (o = e.thumbnailOverlays[0]) || void 0 === o ? void 0 : o.thumbnailOverlayTimeStatusRenderer) || void 0 === i ? void 0 : i.text.simpleText) ? (null === (l = null === (n = e.thumbnailOverlays[0]) || void 0 === n ? void 0 : n.thumbnailOverlayTimeStatusRenderer) || void 0 === l ? void 0 : l.text.simpleText.split(":")) || "" : [0, 0];
        let s = 60 * parseInt(r[0]), u = parseInt(r[1]), c = t ? (null === (d = e.publishedTimeText) || void 0 === d ? void 0 : d.runs[0].text) || "" : yield getVideoDate(a);
        return { id: a, original_title: e.original_title.trim(), title: e.title.trim(), artist: e.artist.trim(), duration: s + u, publishedAt: c };
    }
    if (e.didYouMeanRenderer || e.showingResultsForRenderer)
        return { id: "didyoumean", title: (e = e.didYouMeanRenderer ? e.didYouMeanRenderer : e.showingResultsForRenderer).correctedQuery.runs[0].text, artist: "", duration: 0, publishedAt: "" };
}
catch (e) {
    console.log("format video failed");
} })); }
module.exports = { getVideoDate: getVideoDate, getVideoDesc: getVideoDesc, getChannelDesc: getChannelDesc, searchVideo: searchVideo, searchChannel: searchChannel, getChannelVideos: getChannelVideos, getPlaylistVideos: getPlaylistVideos };
