"use strict";
var __awaiter = this && this.__awaiter || function (e, t, i, n) { return new (i || (i = Promise))((function (o, l) { function d(e) { try {
    r(n.next(e));
}
catch (e) {
    l(e);
} } function a(e) { try {
    r(n.throw(e));
}
catch (e) {
    l(e);
} } function r(e) { var t; e.done ? o(e.value) : (t = e.value, t instanceof i ? t : new i((function (e) { e(t); }))).then(d, a); } r((n = n.apply(e, t || [])).next()); })); };
const axios_1 = require("axios"), moment = require("moment"), headers = { headers: { "Access-Control-Allow-Origin": "*", "x-youtube-client-name": 1, "x-youtube-client-version": "2.20200911.04.00", "User-Agent": "Mozilla/5.0 (Linux; Android 5.0; SM-G900P Build/LRX21T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Mobile Safari/537.36" } }, headersAJAX = { headers: { "Access-Control-Allow-Origin": "*", "User-Agent": "hellobiczes", "x-youtube-client-name": 1, "x-youtube-client-version": "2.20200731.02.01" } }, videoRegex = /ytInitialPlayerConfig\ \=\ (.*)\;\n\ \ \ \ \ \ setTimeout/, mobileRegex = /id\=\"initial\-data\"\>\<\!\-\-\ (.*)\ \-\-\>\<\/div\>\<script\ \>if/;
function wait(e) { for (var t = (new Date).getTime(), i = t; i < t + e;)
    i = (new Date).getTime(); }
function formatYoutubeCount(e) { const t = null == e ? void 0 : e.includes("M"), i = null == e ? void 0 : e.includes("k"); let n = null == e ? void 0 : e.replace(/[^0-9,.]/g, "").replace(",", "."); return t ? n *= 1e6 : i && (n *= 1e3), parseInt(n) || 0; }
function getVideoDate(e) { var t, i, n, o; return __awaiter(this, void 0, void 0, (function* () { try {
    const l = (yield axios_1.default.get("https://m.youtube.com/watch?v=" + e, headers)).data, d = (null === (t = videoRegex.exec(l)) || void 0 === t ? void 0 : t[1]) || "{}", a = JSON.parse(d);
    let r = null === (o = null === (n = JSON.parse(null === (i = a.args) || void 0 === i ? void 0 : i.player_response).microformat) || void 0 === n ? void 0 : n.playerMicroformatRenderer) || void 0 === o ? void 0 : o.publishDate;
    return r += " " + Math.floor(24 * Math.random()) + "-" + Math.floor(60 * Math.random()) + "-" + Math.floor(60 * Math.random()), moment(r, "YYYY-MM-DD H-m-s").toDate();
}
catch (t) {
    getVideoDate(e);
} })); }
function getChannelDesc(e) { var t, i, n; return __awaiter(this, void 0, void 0, (function* () { try {
    const o = (yield axios_1.default.get("https://m.youtube.com/channel/" + encodeURI(e) + "/videos", headers)).data, l = (null === (t = mobileRegex.exec(o)) || void 0 === t ? void 0 : t[1]) || "{}", d = JSON.parse(l);
    return (null === (n = null === (i = d.metadata) || void 0 === i ? void 0 : i.channelMetadataRenderer) || void 0 === n ? void 0 : n.description) || "";
}
catch (e) { } })); }
function searchVideo(e, t) { var i, n, o, l, d, a, r, u, s, v, c; return __awaiter(this, void 0, void 0, (function* () { try {
    let h = [], m = [], f = "";
    if (t) {
        let e = (yield axios_1.default.get("https://youtube.com/browse_ajax?ctoken=" + t, headersAJAX)).data;
        h = (null === (a = null === (d = e[1].response.continuationContents) || void 0 === d ? void 0 : d.gridContinuation) || void 0 === a ? void 0 : a.items) || "", t = (null === (c = null === (v = null === (s = null === (u = null === (r = e[1].response.continuationContents) || void 0 === r ? void 0 : r.gridContinuation) || void 0 === u ? void 0 : u.continuations) || void 0 === s ? void 0 : s[0]) || void 0 === v ? void 0 : v.nextContinuationData) || void 0 === c ? void 0 : c.continuation) || "";
    }
    else {
        let d = (yield axios_1.default.get("https://m.youtube.com/results?sp=EgIQAQ%253D%253D&videoEmbeddable=true&search_query=" + e, headers)).data, a = (null === (i = mobileRegex.exec(d)) || void 0 === i ? void 0 : i[1]) || "{}", r = JSON.parse(a).contents.sectionListRenderer;
        h = r.contents[0].itemSectionRenderer.contents, t = (null === (l = null === (o = null === (n = r.continuations) || void 0 === n ? void 0 : n[0]) || void 0 === o ? void 0 : o.reloadContinuationData) || void 0 === l ? void 0 : l.continuation) || "";
    }
    for (let e = 0; e < h.length; e++) {
        let t = yield formatVideo(h[e], !0);
        "didyoumean" === t.id ? f = t.title : m.push(t);
    }
    return { tracks: m, didyoumean: f, token: t };
}
catch (e) { } })); }
function searchChannel(e, t) { var i, n, o, l, d, a, r, u, s, v, c, h, m, f, g, p, x, b; return __awaiter(this, void 0, void 0, (function* () { try {
    let y = [], R = [], C = "";
    if (t) {
        let e = (yield axios_1.default.get("https://youtube.com/browse_ajax?ctoken=" + t, headersAJAX)).data;
        y = (null === (s = null === (u = e[1].response.continuationContents) || void 0 === u ? void 0 : u.gridContinuation) || void 0 === s ? void 0 : s.items) || "", t = (null === (f = null === (m = null === (h = null === (c = null === (v = e[1].response.continuationContents) || void 0 === v ? void 0 : v.gridContinuation) || void 0 === c ? void 0 : c.continuations) || void 0 === h ? void 0 : h[0]) || void 0 === m ? void 0 : m.nextContinuationData) || void 0 === f ? void 0 : f.continuation) || "";
    }
    else {
        const u = (yield axios_1.default.get("https://m.youtube.com/results?sp=CAASAhAC&search_query=" + encodeURI(e), headers)).data, s = (null === (i = mobileRegex.exec(u)) || void 0 === i ? void 0 : i[1]) || "{}", v = JSON.parse(s);
        y = null === (l = null === (o = null === (n = v.contents.sectionListRenderer) || void 0 === n ? void 0 : n.contents[0]) || void 0 === o ? void 0 : o.itemSectionRenderer) || void 0 === l ? void 0 : l.contents, t = (null === (r = null === (a = null === (d = v.continuations) || void 0 === d ? void 0 : d[0]) || void 0 === a ? void 0 : a.reloadContinuationData) || void 0 === r ? void 0 : r.continuation) || "";
    }
    for (let e = 0; e < y.length; e++)
        if (y[e].compactChannelRenderer) {
            const t = y[e].compactChannelRenderer;
            let i = (null === (g = t.thumbnail) || void 0 === g ? void 0 : g.thumbnails[0].url) || "", n = (null === (p = t.thumbnail) || void 0 === p ? void 0 : p.thumbnails[1].url) || "";
            i = i.startsWith("//") ? "https:" + i : i, n = n.startsWith("//") ? "https:" + n : n;
            const o = formatYoutubeCount(null === (x = t.subscriberCountText) || void 0 === x ? void 0 : x.runs[0].text), l = formatYoutubeCount(null === (b = t.videoCountText) || void 0 === b ? void 0 : b.runs[0].text);
            R.push({ name: t.title.runs[0].text, channel_id: t.channelId, nb_videos: l, nb_subscriber: o, official: !!t.ownerBadges, channel_avatar_small: i, channel_avatar_medium: n });
        }
        else if (y[e].didYouMeanRenderer || y[e].showingResultsForRenderer) {
            let t;
            t = y[e].didYouMeanRenderer ? y[e].didYouMeanRenderer : y[e].showingResultsForRenderer, C = t.correctedQuery.runs[0].text;
        }
    return { channels: R, didyoumean: C, token: t };
}
catch (e) { } })); }
function getChannelVideos(e, t) { var i, n, o, l, d, a, r, u, s, v, c, h, m, f, g, p, x, b, y, R; return __awaiter(this, void 0, void 0, (function* () { try {
    const C = (yield axios_1.default.get("https://m.youtube.com/channel/" + e + "/videos", headers)).data, _ = (null === (i = mobileRegex.exec(C)) || void 0 === i ? void 0 : i[1]) || "{}", w = JSON.parse(_), A = null === (u = null === (r = null === (a = null === (d = null === (l = null === (o = null === (n = w.contents) || void 0 === n ? void 0 : n.singleColumnBrowseResultsRenderer) || void 0 === o ? void 0 : o.tabs[1]) || void 0 === l ? void 0 : l.tabRenderer) || void 0 === d ? void 0 : d.content) || void 0 === a ? void 0 : a.sectionListRenderer) || void 0 === r ? void 0 : r.contents[0]) || void 0 === u ? void 0 : u.itemSectionRenderer;
    let M = (null === (c = null === (v = null === (s = A.continuations) || void 0 === s ? void 0 : s[0]) || void 0 === v ? void 0 : v.nextContinuationData) || void 0 === c ? void 0 : c.continuation) || "", D = [];
    for (let e = 0; e < A.contents.length; e++) {
        let i = yield formatVideo(A.contents[e]);
        if (moment(i.publishedAt).isBefore(t) && t)
            return D;
        D.push(i);
    }
    for (; "" !== M;)
        try {
            wait(Math.floor(300 * Math.random()));
            let e = (yield axios_1.default.get("https://youtube.com/browse_ajax?ctoken=" + M, headersAJAX)).data, i = (null === (g = null === (f = null === (m = null === (h = e[1]) || void 0 === h ? void 0 : h.response) || void 0 === m ? void 0 : m.continuationContents) || void 0 === f ? void 0 : f.gridContinuation) || void 0 === g ? void 0 : g.items) || "";
            M = (null === (R = null === (y = null === (b = null === (x = null === (p = e[1].response.continuationContents) || void 0 === p ? void 0 : p.gridContinuation) || void 0 === x ? void 0 : x.continuations) || void 0 === b ? void 0 : b[0]) || void 0 === y ? void 0 : y.nextContinuationData) || void 0 === R ? void 0 : R.continuation) || "";
            for (let e = 0; e < i.length; e++) {
                let n = yield formatVideo(i[e]);
                if (moment(n.publishedAt).isBefore(t) && t)
                    return D;
                D.push(n);
            }
        }
        catch (e) {
            M = "";
        }
    return D;
}
catch (i) {
    getChannelVideos(e, t);
} })); }
function formatVideo(e, t) { var i, n, o, l, d; return __awaiter(this, void 0, void 0, (function* () { try {
    if (e.compactVideoRenderer || e.gridVideoRenderer) {
        let a = (e = e.compactVideoRenderer ? e.compactVideoRenderer : e.gridVideoRenderer).videoId, r = 0;
        if (e.title.simpleText ? e.title = e.title.simpleText : e.title.runs[0].text ? e.title = e.title.runs[0].text : e.title = "", e.original_title = e.title, 1 === e.title.split("-").length)
            e.artist = "";
        else {
            let t = e.original_title.match(/([^,]*)-(.*)/);
            e.artist = t[1], e.title = t[2];
        }
        r = e.lengthText ? e.lengthText.runs[0].text.split(":") : (null === (n = null === (i = e.thumbnailOverlays[0]) || void 0 === i ? void 0 : i.thumbnailOverlayTimeStatusRenderer) || void 0 === n ? void 0 : n.text.simpleText) ? (null === (l = null === (o = e.thumbnailOverlays[0]) || void 0 === o ? void 0 : o.thumbnailOverlayTimeStatusRenderer) || void 0 === l ? void 0 : l.text.simpleText.split(":")) || "" : [0, 0];
        let u = 60 * parseInt(r[0]), s = parseInt(r[1]), v = t ? (null === (d = e.publishedTimeText) || void 0 === d ? void 0 : d.runs[0].text) || "" : yield getVideoDate(a);
        return { id: a, original_title: e.original_title.trim(), title: e.title.trim(), artist: e.artist.trim(), duration: u + s, publishedAt: v };
    }
    if (e.didYouMeanRenderer || e.showingResultsForRenderer)
        return { id: "didyoumean", title: (e = e.didYouMeanRenderer ? e.didYouMeanRenderer : e.showingResultsForRenderer).correctedQuery.runs[0].text, artist: "", duration: 0, publishedAt: "" };
}
catch (e) { } })); }
module.exports = { getVideoDate: getVideoDate, getChannelDesc: getChannelDesc, searchVideo: searchVideo, searchChannel: searchChannel, getChannelVideos: getChannelVideos };
