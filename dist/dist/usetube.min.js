"use strict";
var __awaiter = this && this.__awaiter || function (e, t, n, i) { return new (n || (n = Promise))((function (o, l) { function d(e) { try {
    a(i.next(e));
}
catch (e) {
    l(e);
} } function r(e) { try {
    a(i.throw(e));
}
catch (e) {
    l(e);
} } function a(e) { var t; e.done ? o(e.value) : (t = e.value, t instanceof n ? t : new n((function (e) { e(t); }))).then(d, r); } a((i = i.apply(e, t || [])).next()); })); };
const axios_1 = require("axios"), moment = require("moment"), headers = { headers: { "Access-Control-Allow-Origin": "*", "x-youtube-client-name": 1, "x-youtube-client-version": "2.20200911.04.00", "User-Agent": "Mozilla/5.0 (Linux; Android 5.0; SM-G900P Build/LRX21T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Mobile Safari/537.36" } }, headersAJAX = { headers: { "Access-Control-Allow-Origin": "*", "User-Agent": "hellobiczes", "x-youtube-client-name": 1, "x-youtube-client-version": "2.20200731.02.01" } }, videoRegex = /ytInitialPlayerConfig\ \=\ (.*)\;\n\ \ \ \ \ \ setTimeout/, mobileRegex = /id\=\"initial\-data\"\>\<\!\-\-\ (.*)\ \-\-\>\<\/div\>\<script\ \>if/;
function wait(e) { for (var t = (new Date).getTime(), n = t; n < t + e;)
    n = (new Date).getTime(); }
function getVideoDate(e) { var t, n, i; return __awaiter(this, void 0, void 0, (function* () { try {
    const o = (yield axios_1.default.get("https://m.youtube.com/watch?v=" + e, headers)).data, l = (null === (t = videoRegex.exec(o)) || void 0 === t ? void 0 : t[1]) || "{}", d = JSON.parse(l);
    let r = null === (i = null === (n = JSON.parse(d.args.player_response).microformat) || void 0 === n ? void 0 : n.playerMicroformatRenderer) || void 0 === i ? void 0 : i.publishDate;
    return r += " " + Math.floor(24 * Math.random()) + "-" + Math.floor(60 * Math.random()) + "-" + Math.floor(60 * Math.random()), moment(r, "YYYY-MM-DD H-m-s").toDate();
}
catch (t) {
    console.log("get date error for " + e + ", try again", t), getVideoDate(e);
} })); }
function getChannelDesc(e) { var t, n, i; return __awaiter(this, void 0, void 0, (function* () { try {
    const o = (yield axios_1.default.get("https://m.youtube.com/channel/" + encodeURI(e) + "/videos", headers)).data, l = (null === (t = mobileRegex.exec(o)) || void 0 === t ? void 0 : t[1]) || "{}", d = JSON.parse(l);
    return (null === (i = null === (n = d.metadata) || void 0 === n ? void 0 : n.channelMetadataRenderer) || void 0 === i ? void 0 : i.description) || "";
}
catch (t) {
    console.log("channel desc error for " + e, t);
} })); }
function searchVideo(e, t) { var n, i, o, l, d, r, a, s, u, c, v; return __awaiter(this, void 0, void 0, (function* () { try {
    let h = [], m = [];
    if (t) {
        let e = (yield axios_1.default.get("https://youtube.com/browse_ajax?ctoken=" + t, headersAJAX)).data;
        h = (null === (r = null === (d = e[1].response.continuationContents) || void 0 === d ? void 0 : d.gridContinuation) || void 0 === r ? void 0 : r.items) || "", t = (null === (v = null === (c = null === (u = null === (s = null === (a = e[1].response.continuationContents) || void 0 === a ? void 0 : a.gridContinuation) || void 0 === s ? void 0 : s.continuations) || void 0 === u ? void 0 : u[0]) || void 0 === c ? void 0 : c.nextContinuationData) || void 0 === v ? void 0 : v.continuation) || "";
    }
    else {
        let d = (yield axios_1.default.get("https://m.youtube.com/results?sp=EgIQAQ%253D%253D&videoEmbeddable=true&search_query=" + e, headers)).data, r = (null === (n = mobileRegex.exec(d)) || void 0 === n ? void 0 : n[1]) || "{}", a = JSON.parse(r).contents.sectionListRenderer;
        h = a.contents[0].itemSectionRenderer.contents, t = (null === (l = null === (o = null === (i = a.continuations) || void 0 === i ? void 0 : i[0]) || void 0 === o ? void 0 : o.reloadContinuationData) || void 0 === l ? void 0 : l.continuation) || "";
    }
    for (let e = 0; e < h.length; e++)
        m.push(yield formatVideo(h[e], !0));
    return { tracks: m, token: t };
}
catch (t) {
    console.log("search videos error, terms: " + e, t);
} })); }
function searchChannel(e, t) { var n, i, o, l, d, r, a, s, u, c, v, h, m, g, f, p, x, b; return __awaiter(this, void 0, void 0, (function* () { try {
    let y = [], _ = [];
    if (t) {
        let e = (yield axios_1.default.get("https://youtube.com/browse_ajax?ctoken=" + t, headersAJAX)).data;
        y = (null === (u = null === (s = e[1].response.continuationContents) || void 0 === s ? void 0 : s.gridContinuation) || void 0 === u ? void 0 : u.items) || "", t = (null === (g = null === (m = null === (h = null === (v = null === (c = e[1].response.continuationContents) || void 0 === c ? void 0 : c.gridContinuation) || void 0 === v ? void 0 : v.continuations) || void 0 === h ? void 0 : h[0]) || void 0 === m ? void 0 : m.nextContinuationData) || void 0 === g ? void 0 : g.continuation) || "";
    }
    else {
        const s = (yield axios_1.default.get("https://m.youtube.com/results?sp=CAASAhAC&search_query=" + encodeURI(e), headers)).data, u = (null === (n = mobileRegex.exec(s)) || void 0 === n ? void 0 : n[1]) || "{}", c = JSON.parse(u);
        y = null === (l = null === (o = null === (i = c.contents.sectionListRenderer) || void 0 === i ? void 0 : i.contents[0]) || void 0 === o ? void 0 : o.itemSectionRenderer) || void 0 === l ? void 0 : l.contents, t = (null === (a = null === (r = null === (d = c.continuations) || void 0 === d ? void 0 : d[0]) || void 0 === r ? void 0 : r.reloadContinuationData) || void 0 === a ? void 0 : a.continuation) || "";
    }
    for (let e = 0; e < y.length; e++)
        if (y[e].compactChannelRenderer) {
            const t = y[e].compactChannelRenderer;
            let n = (null === (f = t.thumbnail) || void 0 === f ? void 0 : f.thumbnails[0].url) || "", i = (null === (p = t.thumbnail) || void 0 === p ? void 0 : p.thumbnails[1].url) || "";
            n = n.startsWith("//") ? "https:" + n : n, i = i.startsWith("//") ? "https:" + i : i;
            const o = null === (x = t.subscriberCountText) || void 0 === x ? void 0 : x.runs[0].text, l = null == o ? void 0 : o.includes("M"), d = null == o ? void 0 : o.includes("k");
            let r = null == o ? void 0 : o.replace(/[^0-9,.]/g, "").replace(",", ".");
            l ? r *= 1e6 : d && (r *= 1e3), console.log(r || 0), _.push({ name: t.title.runs[0].text, channel_id: t.channelId, nb_videos: (null === (b = t.videoCountText) || void 0 === b ? void 0 : b.runs[0].text.replace(/[^0-9k]/g, "").replace("k", "000")) || 0, nb_subscriber: parseInt(r) || 0, official: !!t.ownerBadges, channel_avatar_small: n, channel_avatar_medium: i });
        }
        else if (y[e].didYouMeanRenderer || y[e].showingResultsForRenderer) {
            let t;
            t = y[e].didYouMeanRenderer ? y[e].didYouMeanRenderer : y[e].showingResultsForRenderer, _.push({ name: t.correctedQuery.runs[0].text, channel_id: "didyoumean", nb_videos: "0", nb_subscriber: "0", official: !1, channel_avatar_small: "", channel_avatar_medium: "" }), _[e];
        }
    return { channels: _, token: t };
}
catch (t) {
    console.log("search channel error, terms: " + e, t);
} })); }
function getChannelVideos(e, t) { var n, i, o, l, d, r, a, s, u, c, v, h, m, g, f, p, x, b, y; return __awaiter(this, void 0, void 0, (function* () { try {
    const _ = (yield axios_1.default.get("https://m.youtube.com/channel/" + encodeURI(e) + "/videos", headers)).data, R = (null === (n = mobileRegex.exec(_)) || void 0 === n ? void 0 : n[1]) || "{}", C = JSON.parse(R), w = null === (a = null === (r = null === (d = null === (l = null === (o = null === (i = C.contents.singleColumnBrowseResultsRenderer) || void 0 === i ? void 0 : i.tabs[1]) || void 0 === o ? void 0 : o.tabRenderer) || void 0 === l ? void 0 : l.content) || void 0 === d ? void 0 : d.sectionListRenderer) || void 0 === r ? void 0 : r.contents[0]) || void 0 === a ? void 0 : a.itemSectionRenderer;
    let A = (null === (c = null === (u = null === (s = w.continuations) || void 0 === s ? void 0 : s[0]) || void 0 === u ? void 0 : u.nextContinuationData) || void 0 === c ? void 0 : c.continuation) || "", M = [];
    for (let e = 0; e < w.contents.length; e++) {
        let n = yield formatVideo(w.contents[e]);
        if (t) {
            if (!moment(n.publishedAt).isAfter(t) || !t)
                return M;
            M.push(n);
        }
        else
            M.push(n);
    }
    for (; "" !== A;)
        try {
            wait(Math.floor(300 * Math.random()));
            let e = (yield axios_1.default.get("https://youtube.com/browse_ajax?ctoken=" + A, headersAJAX)).data, n = (null === (g = null === (m = null === (h = null === (v = e[1]) || void 0 === v ? void 0 : v.response) || void 0 === h ? void 0 : h.continuationContents) || void 0 === m ? void 0 : m.gridContinuation) || void 0 === g ? void 0 : g.items) || "";
            A = (null === (y = null === (b = null === (x = null === (p = null === (f = e[1].response.continuationContents) || void 0 === f ? void 0 : f.gridContinuation) || void 0 === p ? void 0 : p.continuations) || void 0 === x ? void 0 : x[0]) || void 0 === b ? void 0 : b.nextContinuationData) || void 0 === y ? void 0 : y.continuation) || "";
            for (let e = 0; e < n.length; e++) {
                let i = yield formatVideo(n[e]);
                if (moment(i.publishedAt).isBefore(t) && t)
                    return M;
                M.push(i);
            }
        }
        catch (e) {
            console.log(e), A = "";
        }
    return M;
}
catch (t) {
    console.log("channel videos error for id: " + e, t);
} })); }
function formatVideo(e, t) { var n, i, o, l, d; return __awaiter(this, void 0, void 0, (function* () { try {
    if (e.compactVideoRenderer || e.gridVideoRenderer) {
        let r = (e = e.compactVideoRenderer ? e.compactVideoRenderer : e.gridVideoRenderer).videoId, a = 0;
        if (e.title.simpleText ? e.title = e.title.simpleText : e.title.runs[0].text ? e.title = e.title.runs[0].text : e.title = "", e.original_title = e.title, 1 === e.title.split("-").length)
            e.artist = "";
        else {
            let t = e.original_title.match(/([^,]*)-(.*)/);
            e.artist = t[1], e.title = t[2];
        }
        a = e.lengthText ? e.lengthText.runs[0].text.split(":") : (null === (i = null === (n = e.thumbnailOverlays[0]) || void 0 === n ? void 0 : n.thumbnailOverlayTimeStatusRenderer) || void 0 === i ? void 0 : i.text.simpleText) ? (null === (l = null === (o = e.thumbnailOverlays[0]) || void 0 === o ? void 0 : o.thumbnailOverlayTimeStatusRenderer) || void 0 === l ? void 0 : l.text.simpleText.split(":")) || "" : [0, 0];
        let s = 60 * parseInt(a[0]), u = parseInt(a[1]), c = t ? (null === (d = e.publishedTimeText) || void 0 === d ? void 0 : d.runs[0].text) || "" : yield getVideoDate(r);
        return { id: r, original_title: e.original_title.trim(), title: e.title.trim(), artist: e.artist.trim(), duration: s + u, publishedAt: c };
    }
    if (e.didYouMeanRenderer || e.showingResultsForRenderer)
        return { id: "didyoumean", title: (e = e.didYouMeanRenderer ? e.didYouMeanRenderer : e.showingResultsForRenderer).correctedQuery.runs[0].text, artist: "", duration: 0, publishedAt: "" };
}
catch (e) {
    console.log(e);
} })); }
module.exports = { getVideoDate: getVideoDate, getChannelDesc: getChannelDesc, searchVideo: searchVideo, searchChannel: searchChannel, getChannelVideos: getChannelVideos };
